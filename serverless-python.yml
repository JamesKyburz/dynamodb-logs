service: dynamodb-logs

frameworkVersion: ^2.19.0

package:
  individually: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-offline-dynamodb-streams
  - serverless-python-requirements
  - serverless-offline-aws-eventbridge
provider:
  name: aws
  deploymentBucket:
    blockPublicAccess: true
    serverSideEncryption: AES256
  logRetentionInDays: 5
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: '*'
  lambdaHashingVersion: 20201221
  #tags:
  #  commit: '${env:COMMIT_ID}'

custom:
  serverless-offline-dynamodb-streams:
    apiVersion: '2013-12-02'
    endpoint: http://0.0.0.0:8000
    region: us-east-1
    accessKeyId: x
    secretAccessKey: x
    skipCacheInvalidation: false
    readInterval: 1000
  pythonRequirements:
    slim: true
    noDeploy:
      - boto3
      - botocore
      - s3transfer
      - urllib3
      - jmespath
      - dateutil
  serverless-offline-aws-eventbridge:
      port: 4010
      debug: false
      account: ''

functions:
  trigger:
    runtime: python3.8
    timeout: 6
    memorySize: 128
    environment:
      PYTHON_ENV: "${opt:stage, 'local'}"
    handler: src/trigger.handler
    package:
      exclude:
        - ./**
        - '!src/trigger.py'
    iamRoleStatementsName: "${self:service.name}-${opt:stage, 'local'}-trigger"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "events:PutEvents"
        Resource:
          - "arn:#{AWS::Partition}:events:#{AWS::Region}:#}AWS::AccountId}:event-bus/dynamodb-log"
    iamRoleStatementsInherit: true
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [dynamodb, StreamArn]
          batchSize: 25
          batchWindow: 1
          parallelizationFactor: 4
          bisectBatchOnFunctionError: true
          startingPosition: LATEST

resources:
  Resources:
    dynamodb: ${file(./dynamodb.yml)}
