service: dynamodb-logs

frameworkVersion: ^2.19.0

package:
  individually: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-offline-dynamodb-streams
  - serverless-python-requirements
  - serverless-offline-aws-eventbridge

custom:
  serverless-offline-dynamodb-streams:
    apiVersion: "2013-12-02"
    endpoint: http://0.0.0.0:8000
    region: us-east-1
    accessKeyId: x
    secretAccessKey: x
    skipCacheInvalidation: false
    readInterval: 1000
  pythonRequirements:
    slim: true
    noDeploy:
      - boto3
      - botocore
      - s3transfer
      - urllib3
      - jmespath
      - dateutil
  serverless-offline-aws-eventbridge:
    port: 4010
    debug: true
    account: ""
    region: us-east-1
    accessKeyId: x
    secretAccessKey: x
  csm:
    enabled:
      local: true
    port:
      local: 31000
    host:
      local: 127.0.0.1

provider:
  name: aws
  deploymentBucket:
    blockPublicAccess: true
    serverSideEncryption: AES256
  logRetentionInDays: 5
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"
  lambdaHashingVersion: 20201221
  environment:
    AWS_CSM_ENABLED: ${self:custom.csm.enabled.${opt:stage}, false}
    AWS_CSM_PORT: ${self:custom.csm.port.${opt:stage}, ''}
    AWS_CSM_HOST: ${self:custom.csm.host.${opt:stage}, ''}
  #tags:
  #  commit: '${env:COMMIT_ID}'


functions:
  eventHandler:
    runtime: python3.8
    timeout: 6
    memorySize: 128
    reservedConcurrency: 1
    handler: src/handler.handler
    environment:
      DYNAMODB_TABLE: "${opt:stage, 'local'}-dynamodb-logs"
    package:
      exclude:
        - ./**
        - "!./src/handler.py"
    iamRoleStatementsName: "${self:service.name}-${opt:stage, 'local'}-event-handler"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:Query"
        Resource:
          - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${opt:stage, 'local'}-dynamodb-logs"
    iamRoleStatementsInherit: true
    events:
      - eventBridge:
          eventBus: "dynamodb-log"
          pattern:
            source:
              - "dynamodb-log"
            detail-type:
              - "stream changes"
            detail:
              log:
                - users
  trigger:
    runtime: python3.8
    timeout: 6
    memorySize: 128
    handler: src/trigger.handler
    package:
      exclude:
        - ./**
        - "!src/trigger.py"
    iamRoleStatementsName: "${self:service.name}-${opt:stage, 'local'}-trigger"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "events:PutEvents"
        Resource:
          - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/dynamodb-log"
    iamRoleStatementsInherit: true
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [dynamodb, StreamArn]
          batchSize: 25
          batchWindow: 1
          parallelizationFactor: 4
          bisectBatchOnFunctionError: true
          startingPosition: LATEST

resources:
  Resources:
    dynamodb: ${file(./dynamodb.yml)}
